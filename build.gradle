buildscript {
    ext {
        springBootVersion = '2.4.6'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
        classpath "io.spring.gradle:dependency-management-plugin:1.0.11.RELEASE"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:3.0"
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'jacoco'
    apply plugin: 'org.sonarqube'

    group 'com.cnu.spg'
    version '0.0.1-SNAPSHOT'
    sourceCompatibility = 11

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation("org.springframework.boot:spring-boot-starter-validation")
        implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.5.6'
        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation "com.h2database:h2"
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "failed"
            exceptionFormat "full"
        }
        finalizedBy 'jacocoTestReport'
    }

    sonarqube {
        properties {
            property "sonar.host.url", "http://localhost:9090"
            property "sonar.login", "910b5a218ab0fe14c43f5d46dc372739e581766e"
            property "sonar.sources", "src"
            property "sonar.language", "java"
            property "sonar.sourceEncoding", "UTF-8"
            property "sonar.test.inclusions", "**/*Test.java"
            property 'sonar.coverage.jacoco.xmlReportPaths', "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
    }

    jacoco {
        toolVersion = '0.8.7'
    }

    jacocoTestReport {
        dependsOn test // 리포트가 만들어지기 전 테스트 실행되어야 한다.
        reports {
            html.enabled true
            xml.enabled true
            csv.enabled false
        }
        finalizedBy 'jacocoTestCoverageVerification'
    }

    jacocoTestCoverageVerification {
        def Qdomains = []
        for (qPattern in "**/QA".."**/QZ") {
            Qdomains.add(qPattern + "*")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, // 리포트 결과에 제외시킬 디렉토리
                        exclude: ['**/LocalConfig*',
                                  '**/ApiServiceApplication*',
                                  '**/DummyData*'] + Qdomains)
            }))
        }
    }

    sonarqube {
        properties {
            property "sonar.sources", "src/main/java"
            property "sonar.tests", "src/test/java"
        }
    }
}